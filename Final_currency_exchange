pip install --upgrade ttkbootstrap

import pandas as pd
import requests
import tkinter as tk
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from ttkbootstrap.toast import ToastNotification
from ttkbootstrap.tableview import Tableview


def get_code():
    api_base_address = 'https://api.nbp.pl/api/exchangerates/tables/a/'
      
    response = requests.get(api_base_address)

    response_json = response.json()
    
    
    rate_df =  pd.json_normalize(response_json, "rates")
    df = rate_df["code"]
    return df.tolist()


class Currency_Exchange(ttk.Frame):
    def __init__(self, master_window):
        super().__init__(master_window, padding=(20,10))
        self.pack(fill=BOTH, expand=YES)
        self.amount_in = ttk.StringVar(value="") 
        self.currency = ttk.StringVar(value="") 
        self.sell_buy = ttk.StringVar(value="")
        

        instruction_text = "Please type in amount you want to exchange and choose currency from the dropdown menu"
        instruction = ttk.Label(self, text=instruction_text, width=50)
        instruction.pack(fill=X, pady=10)

        self.create_form_entry("Amount in: ", self.amount_in)
        

        currency_list = get_code()

        currency_label = ttk.Label(self, text="Select Currency:")
        currency_label.pack(pady=5)
        self.currency_combobox = ttk.Combobox(
            self,
            textvariable=self.currency,
            values=currency_list,
            state="readonly",
        )
        self.currency_combobox.pack(pady=5)
        self.currency_combobox.current(0)  

        
        sell_buy_label = ttk.Label(self, text="Select Operation:")
        sell_buy_label.pack(pady=5)
        self.sell_buy_combobox = ttk.Combobox(
            self,
            textvariable=self.sell_buy,
            values=["Sell", "Buy"],
            state="readonly",
        )
        self.sell_buy_combobox.pack(pady=5)
        self.sell_buy_combobox.current(0)

    # Create field for amout in
    def create_form_entry(self, label, variable):
        form_field_container = ttk.Frame(self)
        form_field_container.pack(fill=X, expand=True, pady=5)

        form_field_label = ttk.Label(self, text=label, width=15)
        form_field_label.pack(pady=5)

        form_input = ttk.Entry(master=form_field_container, textvariable=variable)
        form_field_label.pack(pady=5)

        return form_input
    
    # Create button
    def create_buttonbox(self):
        button_container = ttk.Frame(self)
        button_container.pack(fill=X, expand=YES, pady=5)
        
        calculate_btn = ttk.Button(
            master=button_container,
            text="Calculate",
            command=self.on_submit,
            bootstyle=SUCCESS,
            width=6
        )

        submit_btn.pack(pady=5)
        
                

    # action when user clicks calculate button
    def on_calculate(self):
        amount_in = self.amount_in.get()
        
        #________________________tutaj ma mnożyć rate * amount * buy

    def create_table(self):
        return





if __name__== "__main__":
    app = ttk.Window("Currency Exchange", "minty", resizable=(True, True))
    Currency_Exchange(app)
    app.mainloop()
